// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid()) @db.VarChar(100)
  username        String          @unique @db.VarChar(20)
  password        String          @db.VarChar(100)
  disabled        Int?            @default(0)
  deleted         Int?            @default(0)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  profile         Profile?
  role_in_user    RoleInUser[]
  booking         Booking[]
  booking_in_user BookingInUser[]

  @@map("users")
}

enum Gender {
  MA
  FE
  OT
}

model Profile {
  id          Int       @id @default(autoincrement()) @db.Int
  nickname    String?   @db.VarChar(50)
  avatar      String?   @db.VarChar(255)
  email       String?   @unique @db.VarChar(50)
  phone       String?   @unique @db.VarChar(20)
  gender      Gender    @default(MA)
  birthday    DateTime?
  description String?   @db.VarChar(150)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String    @unique

  @@map("profiles")
}

model Role {
  id                 Int                @id @default(autoincrement())
  name               String             @unique @db.VarChar(50)
  description        String?            @db.VarChar(150)
  disabled           Int?               @default(0) // 0 是false 1是true
  deleted            Int?               @default(0)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  role_in_permission RoleInPermission[]
  role_in_user       RoleInUser[]

  @@map("roles")
}

model RoleInUser {
  roles   Role @relation(fields: [role_id], references: [id])
  role_id Int

  users   User   @relation(fields: [user_id], references: [id])
  user_id String

  @@id([role_id, user_id])
  @@map("role_in_user")
}

enum MenuType {
  DIRECTORY
  MENU
  BUTTON
}

model Permission {
  id     Int      @id @default(autoincrement())
  type   MenuType @default(MENU)
  button String?  @unique

  name      String  @unique @db.VarChar(225)
  path      String? @db.VarChar(225)
  component String? @db.VarChar(225)

  title           String?  @db.VarChar(225)
  i18n_key        String?  @db.VarChar(225)
  order           Int?
  keep_alive      Boolean? @default(false)
  constant        Boolean  @default(false)
  icon            String?  @db.VarChar(225)
  local_icon      String?  @db.VarChar(225)
  href            String?  @db.VarChar(225)
  hide_in_menu    Boolean? @default(false)
  active_menu     String?  @db.VarChar(225)
  multi_tab       Boolean? @default(false)
  fixed_index_tab Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  pid                Int?
  parent             Permission?        @relation("ParentToChildren", fields: [pid], references: [id])
  children           Permission[]       @relation("ParentToChildren")
  role_in_permission RoleInPermission[]

  @@map("permissions")
}

model RoleInPermission {
  permissions   Permission @relation(fields: [permission_id], references: [id])
  permission_id Int

  roles   Role @relation(fields: [role_id], references: [id])
  role_id Int

  @@id([role_id, permission_id])
  @@map("role_in_permission")
}

model Room {
  id              Int             @id @default(autoincrement())
  name            String          @unique @db.VarChar(50)
  description     String          @db.VarChar(255)
  capacity        Int
  location        String          @db.VarChar(255)
  equipment       String          @db.VarChar(255)
  is_booked       Int?            @default(0)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  booking         Booking[]
  booking_in_room BookingInRoom[]

  @@map("rooms")
}

model BookingInRoom {
  rooms   Room @relation(fields: [room_id], references: [id])
  room_id Int

  bookings   Booking @relation(fields: [booking_id], references: [id])
  booking_id Int

  @@id([room_id, booking_id])
  @@map("booking_in_room")
}

enum BookingStatus {
  APPLYING
  PASS
  REJECTED
  DISMISSED
}

model Booking {
  id         Int           @id @default(autoincrement())
  start_time DateTime
  end_time   DateTime
  note       String?       @db.VarChar(255)
  status     BookingStatus @default(APPLYING)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  room            Room            @relation(fields: [room_id], references: [id])
  room_id         Int
  booking_in_room BookingInRoom[]
  booking_in_user BookingInUser[]

  @@map("bookings")
}

model BookingInUser {
  users   User   @relation(fields: [user_id], references: [id])
  user_id String

  bookings   Booking @relation(fields: [booking_id], references: [id])
  booking_id Int

  @@id([user_id, booking_id])
  @@map("booking_in_user")
}
